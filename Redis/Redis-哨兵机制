## Redis-哨兵机制

##### 1. Redis的主从复制核心概念

基本概念：

单个Redis如果因为某种原因宕机的话，可能会导致Redis服务不可用，可以使用主从复制实现一主多从，主节点负责写的操作，从节点负责读的操作，主节点会定期将数据同步到从节点中，保证数据一致性的问题。

![image-20211115221116329](D:\软件\svn检出内容\Java资料\图片\image-20211115221116329.png)

注意：

> 1. 在分布式领域不可能实现绝对的强一致性，因为有网络原因（别人还在写入主Redis的东西，在从Redis里是读不出来的）

##### 2. Redis主从复制的主要作用

单个Redis如果因为某种原因宕机的话，可能会导致Redis服务不可用，可以使用主从复制实现一主多从

主从复制：

> - 实现Redis集群
> - 数据的备份
> - 读写分离

主从复制过程：

需要在从Redis服务器的Conf文件里配上salveOf：192.180.1.110：6379（主Redis的服务的IP地址和端口号 加上密码）

从Redis服务器和主Redis服务器建立Socket长连接

采用全量和增量的形式将数据同步到从Redis服务器（全量：Redis首次启动 增量：每次set时）

主从复制可能存在的问题：

![image-20211115230947965](D:\软件\svn-测试连接文件夹\Java资料\图片\image-20211115230947965.png)

**该主从同步方式存在 如果从节点非常多的话，会导致对主节点同步多个从节点压力非常大**

**可以采用树状类型解决该问题**

##### 3. Redis可能还存在的bug

如果主节点存在了问题，整个Redis环境是不可以实现写的操作，需要人工更改配置变为主操作

如何解决该问题：使用哨兵机制可以帮助解决Redis集群主从选举策略。

##### 4. 什么是哨兵机制

Redis的哨兵机制就是解决我们以上主从复制存在缺陷（选举问题），解决问题保证我们的Redis高可用，实现自动化故障发现与故障转移。

##### 5. Redis哨兵机制底层原理

1.  哨兵机制每个10s时间只需要配置监听我们的主节点就可以获取当前整个Redis集群的环境列表，采用info 命令形式。
2.  哨兵不建议是单机的，最好每个Redis节点都需要配置哨兵监听。
3.  哨兵集群原理是如何：多个哨兵都执行同一个主的master节点，订阅到相同都通道，有新的哨兵加入都会向通道中发送自己服务的信息，该通道的订阅者可以发现新哨兵的加入，随后相互建立长连接。
4.  Master的故障发现 单个哨兵会向主的master节点发送ping的命令，如果master节点没有及时的响应，哨兵会认为该master节点为“主观不可用状态”会发送给其他都哨兵确认该Master节点是否不可用，当前确认的哨兵节点数>=quorum(可配置)，会实现重新选举。

##### 6. 缓存穿透解决方案

缓存穿透是指定的key不存在在Redis中，频繁高并发查询导致一直访问数据库，导致缓存无法命中，这时候对数据压力是非常大的。

解决方案：

1.接口API实现限流，接口频率的限制

2.数据库和Redis都查询不到时，可以将数据库空值写入缓存中，加上短时间的有效期

3.布隆过滤器

##### 7. 缓存击穿

热点key:经常使用到的Redis的key

在高并发的情况下，当一个热点key过期时，因为访问该key请求过多，多个请求同时发现该key过期，同时访问数据库，同时放入Redis中，

解决方案：

1.使用分布式技术，多个请求同时访问，只有获取锁的才能将查询结果放入Redis缓存中，没有获取到锁的先等待

2.本地锁（和分布式锁一样）

3.软过期 对热点key设置无限有效期或者异步延长时间

##### 8.缓存雪崩

Redis重启没有持久化或者大量的key集中失效，突然对数据库的压力十分大

解决方案：

1.设置不一样的过期时间或者设置随机过期时间

2.软过期 设置用不过期
